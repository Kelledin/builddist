#!/bin/bash

export CMDPATH="${0##*/}"
export PLUGIN_LIST=""
export BUILD_USER=""
export VERBOSITY=1
export PLUGINDIR="@plugindir@"

# Normalize trailing slashes in the plugin directory.
while [ -n "$PLUGINDIR" ] && [ "${PLUGINDIR%/}" != "$PLUGINDIR" ]; do
    PLUGINDIR="${PLUGINDIR%/}"
done

export PLUGINDIR="${PLUGINDIR}/"

DPKG_HELP_LOADOPT=`dpkg-buildpackage --help | egrep "^\s+-l,\s*--load\["`

if [ -n "$DPKG_HELP_LOADOPT" ]; then
    DEFAULT_LOADOPT="--load=auto"
else
    DEFAULT_LOADOPT=""
fi

DEFAULT_JOBOPT="--jobs=auto"
DEFAULT_ARCH=""

# Build specifier lines are expected to be in the form:
# <package> <arch> <version> <build-opts> <install-opts> <subpackages>
#
#     <package>:     Debian package name, with no version
#     <arch>:        Target Debian arch to build for ('-' for default)
#     <ver>:         Debian package, in "<version>-<release>" form
#     <build-opts>   Comma-separated list of options to pass to
#                    dpkg-buildpackage ('-' for default)
#                    NOTE: if "-j|--jobs" is not specified, "--jobs=auto"
#                    is assumed.
#     <install-opts> Comma-separated list of options to pass to
#                    "dpkg --install" ('-' for default)
#     <packages>     Comma-separated list of expected binary packages, without
#                    version-release, arch, or .deb garnish.
#

chain_plugins() {
    local FULL_CMD="" PLUG

    if [ -z "$PLUGIN_LIST" ]; then
        cat
        return $?
    fi

    for PLUG in $PLUGIN_LIST; do
        if [ -n "$FULL_CMD" ]; then
            FULL_CMD="$FULL_CMD | $PLUG $@"
        else
            FULL_CMD="$PLUG $@"
        fi
    done

    FULL_CMD="$FULL_CMD; "'RVALS=( ${PIPESTATUS[@]} ); RTOT=0; for VAL in ${RVALS[@]}; do RTOT=$((RTOT+VAL)); done; exit $RTOT'
    # Use /bin/bash so we can get the PIPESTATUS functionality.
    /bin/bash -c "$FULL_CMD"
    return $?
}

chain_plugins_cmd() {
    local FULL_CMD="" PLUG

    if [ -z "$PLUGIN_LIST" ]; then
        cat
        return $?
    fi

    for PLUG in $PLUGIN_LIST; do
        if [ -n "$FULL_CMD" ]; then
            FULL_CMD="$FULL_CMD | $PLUG '$@'"
        else
            FULL_CMD="$PLUG '$@'"
        fi
    done

    FULL_CMD="$FULL_CMD; "'RVALS=( ${PIPESTATUS[@]} ); RTOT=0; for VAL in ${RVALS[@]}; do RTOT=$((RTOT+VAL)); done; exit $RTOT'
    # Use /bin/bash so we can get the PIPESTATUS functionality.
    /bin/bash -c "$FULL_CMD"
    return $?
}

read_by_line() {
    local IFS=$'\n'

    read "$@"
    return $?
}

build_by_line() {
    local ROOT="$PWD" NAME PKGARCH VER BLDOPTS INSTOPTS BINS N LEN BUILDDIR
    local DSCPATH JOBOPT="$DEFAULT_JOBOPT" ARTDIR="$PWD" SUDO_CMD="" BINVER=""
    local BINARCH="" THISBIN CMDTOKS BUILDCMD INSTALLOPT="-i" THISOPT RVAL=0
    local LOADOPT="$DEFAULT_LOADOPT"

    case "$1" in
    -r | --root) ROOT="$2"                            ; shift 2  ;;
    -r*)         ROOT="${1#-r}"                       ; shift    ;;
    --root=?*)   ROOT="${1#--root=}"                  ; shift    ;;
    -*)          echo "ERROR: Invalid option '$1'" >&2; return 1 ;;
    --)          shift                                           ;;
    esac

    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] ||
       [ -z "$5" ] || [ -z "$6" ] || [ -z "$ROOT" ]; then
        echo "ERROR: blank or insufficient command-line options!" >&2
        return 1
    fi

    NAME="$1"
    PKGARCH="$2"
    VER="$3"
    BLDOPTS=( `echo "${4//,/ }"` )
    INSTOPTS=( `echo "${5//,/ }"` )
    BINS=( `echo "${6//,/ }"` )

    if [ "${ROOT#?*://}" = "$ROOT" ] && [ "${ROOT#/}" != "$ROOT" ]; then
        # Relative local path?  Turn it into an absolute path.
        ROOT="${PWD}/${ROOT}"
    fi

    # /tmp is often tmpfs, which consumes RAM+swap, is not persistent across
    # reboots, and may not behave exactly like a typical filesystem in all
    # corner-cases.  This could affect results for build-time unit/regression
    # tests, so we use @localstatedir@/tmp instead.
    if [ -n "$PKGARCH" ] && [ "$PKGARCH" != "-" ]; then
        BUILDDIR=`mktemp -d @localstatedir@/tmp/.build.${NAME}_${VER}_${PKGARCH}.XXXXXX`
    else
        BUILDDIR=`mktemp -d @localstatedir@/tmp/.build.${NAME}_${VER}.XXXXXX`
    fi

    if [ -z "$BUILDDIR" ] || [ ! -d "$BUILDDIR" ]; then
        echo "ERROR: cannot create temporary directory" >&2
        return 1
    fi

    cd "$BUILDDIR"

    if [ "${ROOT#/}" != "$ROOT" ]; then
        dpkg-source -x "${ROOT}/${NAME}_${VER}.dsc" || RVAL=$?
    else
        dget -u "${ROOT}/${NAME}_${VER}.dsc" || RVAL=$?
    fi

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: cannot download or extract source tree" >&2
        return $RVAL
    fi

    # Make sure job count is specified in the build options.
    LEN="${#BLDOPTS[@]}"

    if [ "$LEN" = "1" ] && [ "${BLDOPTS[0]}" = "-" ]; then
        BLDOPTS[0]="$JOBOPT"
        BLDOPTS[1]="$LOADOPT"
        JOBOPT=""
        LOADOPT=""
    else
        for (( N=0; N<LEN; N++ )); do
            THISOPT="${BLDOPTS[$N]}"

            if [ "${THISOPT#-j}" != "$THISOPT" ] || [ "${THISOPT#--jobs}" != "$THISOPT" ]; then
                JOBOPT=""
            elif [ "${THISOPT#-l}" != "$THISOPT" ] || [ "${THISOPT#--load}" != "$THISOPT" ]; then
                LOADOPT=""
            fi
        done
    fi

    if [ -n "$PKGARCH" ] && [ "$PKGARCH" != "-" ]; then
        PKGARCH="--host-arch ${PKGARCH} --target-arch ${PKGARCH}"
    elif [ -n "$DEFAULT_ARCH" ] && [ "$DEFAULT_ARCH" != "-" ]; then
        PKGARCH="--host-arch ${DEFAULT_ARCH} --target-arch ${DEFAULT_ARCH}"
    fi

    if [ -n "${PKGARCH}${JOBOPT}${LOADOPT}" ]; then
        for THISOPT in $PKGARCH $JOBOPT $LOADOPT ; do
            if [ -n "$THISOPT" ] && [ "$THISOPT" != "-" ]; then
                LEN="${#BLDOPTS[@]}"
                BLDOPTS[$LEN]="$THISOPT"
            fi
        done
    fi

    if [ "`id -u`" != "0" ]; then
        SUDO_CMD=sudo
    fi

    cd "${NAME}-${VER%-*}" || RVAL=$?

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: cannot change to directory '${NAME}-${VER%-*}'" >&2
        return $RVAL
    fi

    if [ "${#BLDOPTS[@]}" = "1" ] && [ "${BLDOPTS[0]}" = "-" ]; then
        BUILDCMD="dpkg-buildpackage --build=binary"
    else
        BUILDCMD="dpkg-buildpackage --build=binary ${BLDOPTS[@]}"
    fi
 
    if [ -n "$BUILD_USER" ] && [ "`id -u`" = "0" ]; then
        chown -R "$BUILD_USER" "$BUILDDIR" &&
        su "$BUILD_USER" -c "$BUILDCMD" ||
        RVAL=$?
    else
        $BUILDCMD || RVAL=$?
    fi

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: build command '$BUILDCMD' FAILED" >&2
        return $RVAL
    fi

    if [ -d debian/tmp ]; then
        dh_missing --fail-missing || RVAL=$?
    fi

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: unpackaged files detected; build rejected" >&2
        return $RVAL
    fi

    cd .. || RVAL=$?

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: cannot leave source directory" >&2
        return $RVAL
    fi

    LEN="${#BINS[@]}"

    for (( N=0; N<LEN; N++ )); do
        THISBIN="${BINS[$N]}"

        case "$THISBIN" in
        # Fully pre-garnished, down to the .deb suffix.
        ?*_?*_?*.deb) ;;
        # Fully garnished, except for the .deb suffix.
        ?*_?*_?*)     THISBIN="${THISBIN}.deb" ;;
        # Version-garnished.  Deduce arch via wildcard...
        ?*_?*)        THISBIN=`echo "${THISBIN}_"*.deb` ;;
        # No garnish.  Assume source version; deduce arch by garnish...
        *)            THISBIN=`echo "${THISBIN}_${VER}_"*.deb` ;;
        esac

        if [ ! -f "$THISBIN" ]; then
            echo "ERROR: cannot find listed binary package artifact '${BINS[$N]}' (tried '${THISBIN}')" >&2
            return 1
        fi

        BINS[$N]="$THISBIN"
    done

    if [ "${#INSTOPTS[@]}" = "1" ] && [ "${INSTOPTS[0]}" = "-" ]; then
        $SUDO_CMD dpkg $INSTALLOPT -- "${BINS[@]}" || RVAL=$?
    else
        # Make sure user hasn't specified a different variant of the typical
        # install option (such as "--unpack").  If so, the user-specified
        # option takes precedence.
        #
        # Note that this only catches the obvious, simple alternatives.  If
        # the user does something silly like specify "--remove" as an install
        # option, the resulting dpkg command is almost guaranteed to fail, and
        # that's probably the most appropriate response.
        for THISOPT in "${INSTOPTS[@]}"; do
            if [ "$THISOPT" = "--install" ] || [ "$THISOPT" = "-i" ] ||
               [ "$THISOPT" = "--unpack" ] || [ "$THISOPT" = "-u" ]; then
                INSTALLOPT=""
                break
            fi
        done

        $SUDO_CMD dpkg $INSTALLOPT "${INSTOPTS[@]}" -- "${BINS[@]}" || RVAL=$?
    fi

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: package installation failed" >&2
        return $RVAL
    fi

    rm -Rf "${NAME}-${VER%-*}" &&
    mv -v * "${ARTDIR}" &&
    cd "${ARTDIR}" &&
    rm -Rf "${BUILDDIR}" ||
    RVAL=$?

    if [ "$RVAL" != "0" ]; then
        echo "ERROR: build directory collection and clean up FAILED" >&2
    fi

    return $RVAL
}

build_list() {
    local LNUM=0 INPUT_ID TOKS ROOTOPT RVAL=0 RVALS FULL_LINE TRUNC_LINE

    case "$1" in
    -r | --root)     ROOTOPT="--root=$2" ; shift 2 ;;
    -r* | --root=?*) ROOTOPT="$1"        ; shift   ;;
    --)              ROOTOPT="-r${PWD}"  ; shift   ;;
    *)               ROOTOPT="-r${PWD}"            ;;
    esac

    INPUT_ID="$1"
    [ -z "$INPUT_ID" ] && INPUT_ID="unknown source"

    while read_by_line FULL_LINE; do
        LNUM=$((LNUM+1))
        TOKS=( `echo $FULL_LINE` )

        if [ -z "$FULL_LINE" ]; then
            # Blank line.
            continue
        elif [ "${FULL_LINE#!}" != "$FULL_LINE" ]; then
            FULL_LINE="${FULL_LINE#!}"

            # This isn't a build item, but rather a raw shell command.
            if [ -n "$PLUGIN_LIST" ]; then
                # For custom commands, filter out everything but characters
                # typically used in file paths or command names.  Anything
                # with special significance to the shell (like quotes, glob
                # characters, etc.) are risky to embed in system commands.
                TRUNC_LINE="${FULL_LINE%%[^A-Za-z0-9/._-]*}"

                if [ "$TRUNC_LINE" != "$FULL_LINE" ]; then
                    TRUNC_LINE="${TRUNC_LINE} ...(args)"
                fi

                # Let's at least indicate the line number of this command
                # to make it a little bit traceable.
                : | /bin/sh -c "${FULL_LINE}" 2>&1 | chain_plugins_cmd "${LNUM}:$TRUNC_LINE..."
                RVALS=( ${PIPESTATUS[@]} )
                RVAL=${RVALS[1]}

                if [ "${RVALS[2]}" != "0" ]; then
                    echo "WARNING: line $LNUM: plugin chain failed (exit ${RVALS[1]})" >&2
                fi
            else
                : | /bin/sh -c "${FULL_LINE#!}"
                RVAL=$?
            fi
        elif [ "${#TOKS[@]}" = "6" ]; then
            if [ -n "$PLUGIN_LIST" ]; then
                : | build_by_line "$ROOTOPT" "${TOKS[@]}" 2>&1 | chain_plugins "${TOKS[@]}"
                RVALS=( ${PIPESTATUS[@]} )
                RVAL=${RVALS[1]}

                if [ "${RVALS[2]}" != "0" ]; then
                    echo "WARNING: line $LNUM: plugin chain failed (exit ${RVALS[1]})" >&2
                fi
            else
                : | build_by_line "$ROOTOPT" "${TOKS[@]}"
                RVAL=$?
            fi

            # Give a failure indication, in case processing output is subsumed
            # by a plugin.
            if [ "$RVAL" != "0" ]; then
                echo "FAILED processing line $LNUM" >&2
            fi
        else
            echo "INVALID line $LNUM of $INPUT_ID (expected 6 tokens, got ${#TOKS[@]})" >&2
            return 1
        fi

        if [ "$RVAL" != "0" ]; then
            [ "$INFILE" = "-" ] &&
            echo "FAILED at line $LNUM of $INPUT_ID (exit code $RVAL)" >&2 ||
            return "$RVAL"
        fi
    done

    return 0
}

report_version() {
    echo "${CMDPATH} version 0.3"
    return 0
}

usage() {
    report_version
    cat << EOF
USAGE: ${CMDPATH} [-r|--root <path>] [-p|--plugin <plugin>[,...]]
                 [-P|--plugin-dir <dir>] [-u|--user <user>] [-a|--arch <arch>]
                 [-j|--jobs <count>] [-l|--load <load>] [-v|--verbose]
                 [-q|--quiet] [--version] [-h|--help] [buildlist] ...

    -r,--root <path>      : specify local file path or URL where source
                            packages are stored (default current directory)
    -p,--plugin <plugin>  : enable output plugins (comma-delimited; cumulative
                            if specified multiple times)
    -P,--plugin-dir <dir> : override directory to search for plugins
                            (default: @plugindir@)
    -u,--user <user>      : specify user account to use for package builds
                            (generally usable only if running as root)
    -a,--arch <arch>      : set default host+target architecture (default:
                            let dpkg-buildpackage decide)
    -j,--jobs <count>     : set default job count (default: auto)
    -l,--load <load>      : set default maximum load (default: auto if
                            supported)
    -v,--verbose          : increase verbosity
    -q,--quiet            : decrease verbosity
    -V,--version          : report version
    -h,--help             : print help (this screen)

EOF

    return 0
}

add_plugins() {
    local NEW_PLUGINS="${1//,/ }" TOK RETVAL=0

    for TOK in $NEW_PLUGINS; do
        if [ "${TOK#/}" != "$TOK" ] || [ "${TOK#./}" != "$TOK" ] || [ "${TOK#../}" != "$TOK" ]; then
            # User explicitly specified an absolute or relative path, which
            # is allowed to be outside the standard plugin directories.
            if [ -f "$TOK" ] && [ -x "$TOK" ]; then
                if [ $((VERBOSITY)) -gt 1 ] && [ "${TOK#$PLUGINDIR}" ]; then
                    echo "WARNING: user specified plugin '$TOK' from nonstandard path" >&2
                fi

                export PLUGIN_LIST="$PLUGIN_LIST $TOK"
            else
                echo "WARNING: cannot locate external plugin '$TOK'" >&2
            fi
        elif [ -f "${PLUGINDIR}${TOK}" ] &&
             [ -x "${PLUGINDIR}${TOK}" ]; then
            export PLUGIN_LIST="$PLUGIN_LIST ${PLUGINDIR}${TOK}"
        else
            echo "WARNING: cannot locate internal plugin '$TOK'" >&2
            RETVAL=$((RETVAL+1))
        fi
    done

    return $RETVAL
}

opts=$(getopt \
    --longoptions 'user:,root:,plugin:,plugin-dir:,arch:,jobs:,load:,verbose,quiet,version,help' \
    --name "$CMDNAME" \
    --options "u:r:p:P:a:j:l:vqVh" \
    -- "$@"
)

eval set --$opts

while [ $# -gt 0 ]; do
    case "$1" in
    -u|--user)       BUILD_USER="$2"             ; shift 2 ;;
    -r|--root)       ROOTOPT="--root=$2"         ; shift 2 ;;
    -p|--plugin)     add_plugins "$2"            ; shift 2 ;;
    -P|--plugin-dir) PLUGINDIR="$2"              ; shift 2 ;;
    -a|--arch)       DEFAULT_ARCH="$2"           ; shift 2 ;;
    -j|--jobs)       DEFAULT_JOBOPT="--jobs=$2"  ; shift 2 ;;
    -l|--load)       DEFAULT_LOADOPT="--load=$2" ; shift 2 ;;
    -v|--verbose)    VERBOSITY=$((VERBOSITY+1))  ; shift   ;;
    -q|--quiet)      VERBOSITY=$((VERBOSITY-1))  ; shift   ;;
    -V|--version)    report_version              ; exit 0  ;; 
    -h|--help)       usage                       ; exit 0  ;;
    --)              shift ;  break ;;
    *)               break ;;
    esac
done

if [ -z "$DPKG_HELP_LOADOPT" ] && [ -n "$DEFAULT_LOADOPT" ]; then
    echo "WARNING: IGNORING '$DEFAULT_LOADOPT': not supported by dpkg" >&2
    DEFAULT_LOADOPT=""
fi

if [ -n "$DEFAULT_JOBOPT" ] && [ "$DEFAULT_JOBOPT" != "--jobs=auto" ]; then
    # Validate parallel job count.
    TSTVAL="${DEFAULT_JOBOPT#--jobs=}"

    if [ -n "${TSTVAL//[0-9]/}" ] || [ $((TSTVAL)) -lt 1 ]; then
        echo "ERROR: invalid default job count '$TSTVAL'" >&2
        exit 1
    fi
fi

if [ -n "$DEFAULT_LOADOPT" ] && [ "$DEFAULT_LOADOPT" != "--load=auto" ]; then
    # Validate max load.
    # TODO: support real-number max load (i.e. "1.0", "2.5", etc.), if we ever
    # implement it in dpkg.
    TSTVAL="${DEFAULT_LOADOPT#--load=}"

    if [ -n "${TSTVAL//[0-9]/}" ] || [ $((TSTVAL)) -lt 1 ]; then
        echo "ERROR: invalid default max load '$TSTVAL'" >&2
        exit 1
    fi
fi

if [ -n "$DEFAULT_ARCH" ]; then
    # Make sure dpkg-architecture will accept the specified arch.
    dpkg-architecture -a "$DEFAULT_ARCH" >& /dev/null &&
    dpkg-architecture -A "$DEFAULT_ARCH" >& /dev/null

    if [ $? -ne 0 ]; then
        echo "ERROR: default architecture '$DEFAULT_ARCH' not accepted by dpkg" >&2
        exit 1
    fi
fi

export DEFAULT_LOADOPT DEFAULT_JOBOPT DEFAULT_ARCH || true

# Normalize trailing slashes in the plugin directory.
# TODO: duplicated code; abstract to a function?
while [ -n "$PLUGINDIR" ] && [ "${PLUGINDIR%/}" != "$PLUGINDIR" ]; do
    PLUGINDIR="${PLUGINDIR%/}"
done

export PLUGINDIR="${PLUGINDIR}/"

RAW_CMDPATH="$0"

if [ "$CMDPATH" = "$RAW_CMDPATH" ]; then
    # Bare command name.  Locate it via "which".
    RAW_CMDPATH=`which "$RAW_CMDPATH"`
fi

MY_LINELEN=0
MY_EOSLINE=0
export BUILD_USER VERBOSITY

if [ -f "$RAW_CMDPATH" ] && [ -x "$RAW_CMDPATH" ]; then
    # We can be reasonably confident we know our own path.
    # NOTE: this could still theoretically be wrong if someone explicitly sets
    # a deliberately bogus argv[0].
    MY_LINELEN=`wc -l "$RAW_CMDPATH" | awk '{ print $1 }'`
    MY_EOSLINE=`grep -m 1 -n '^##end-of-script#end-of-script##$' "${RAW_CMDPATH}" | sed 's|:.*$||'`
    [ -z "$MY_EOSLINE" ] && MY_EOSLINE=0 && MY_LINELEN=0

    # If there's an attached payload, make sure it isn't just a whole lot of
    # empty nothing.  If so, ignore it.
    if [ $((MY_LINELEN)) -gt $((MY_EOSLINE)) ]; then
        tail -n $((MY_EOSLINE+1)) "$RAW_CMDPATH" |
        sed 's|#.*$||' |
        egrep -vq '^\s*$' >&/dev/null ||
        MY_LINELEN="$MY_EOSLINE"
    fi
fi

if [ $# -eq 0 ] && [ $((MY_LINELEN)) -gt $((MY_EOSLINE)) ]; then
    # We detected an appended payload; use this as our build list.
    tail -n +$((MY_EOSLINE+1)) "${RAW_CMDPATH}" | sed 's|#.*$||' | build_list "$ROOTOPT" "appended payload"
    exit $?
fi

if [ $# -eq 0 ]; then
    # Expect a build list on stdin.
    LISTOFLISTS=( '-' )
else
    LISTOFLISTS=( "$@" )
fi

# We presume all build lists are passed on the command line.
for INFILE in "${LISTOFLISTS[@]}"; do
    export INFILE

    if [ ! -f "$INFILE" ] || [ ! -r "$INFILE" ]; then
        echo "ERROR: cannot read input file '$INFILE'" >&2
        exit 1
    fi

    [ "$INFILE" = "-" ] && THIS_LIST="stdin" || THIS_LIST="file '$INFILE'"
    sed 's|#.*$||' "$INFILE" | build_list "$ROOTOPT" "$THIS_LIST" || exit $?
done

exit 0

# You can embed the build list with builddist simply by appending it at the
# end (below the following line).  If no build list is supplied via command
# line options, the script will look here for an embedded list before it
# resorts to using stdin.
##end-of-script#end-of-script##
